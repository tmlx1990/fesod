"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8143],{508:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>d});var t=n(9729);const l={},a=t.createContext(l);function r(e){const s=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),t.createElement(a.Provider,{value:s},e.children)}},5787:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>i,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"read/csv","title":"CSV","description":"This chapter introduces how to use FastExcel to read custom CSV files.","source":"@site/docs/read/csv.md","sourceDirName":"read","slug":"/read/csv","permalink":"/docs/read/csv","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fesod/edit/main/website/docs/read/csv.md","tags":[],"version":"current","frontMatter":{"id":"csv","title":"CSV"},"sidebar":"docs","previous":{"title":"Rows","permalink":"/docs/read/num-rows"},"next":{"title":"Head","permalink":"/docs/read/head"}}');var l=n(5813),a=n(508);const r={id:"csv",title:"CSV"},d="Reading CSV Files",i={},o=[{value:"Overview",id:"overview",level:2},{value:"Parameter Details and Examples",id:"parameter-details-and-examples",level:2},{value:"delimiter",id:"delimiter",level:3},{value:"Code Example",id:"code-example",level:4},{value:"quote",id:"quote",level:3},{value:"Code Example",id:"code-example-1",level:4},{value:"recordSeparator",id:"recordseparator",level:3},{value:"Code Example",id:"code-example-2",level:4},{value:"nullString",id:"nullstring",level:3},{value:"Code Example",id:"code-example-3",level:4},{value:"escape",id:"escape",level:3},{value:"Code Example",id:"code-example-4",level:4},{value:"CSVFormat Configuration Details and Examples",id:"csvformat-configuration-details-and-examples",level:2},{value:"Code Example",id:"code-example-5",level:3}];function c(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.header,{children:(0,l.jsx)(s.h1,{id:"reading-csv-files",children:"Reading CSV Files"})}),"\n",(0,l.jsx)(s.p,{children:"This chapter introduces how to use FastExcel to read custom CSV files."}),"\n",(0,l.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsxs)(s.p,{children:["FastExcel reads CSV files through different parameter configurations. It uses ",(0,l.jsx)(s.a,{href:"https://commons.apache.org/proper/commons-csv",children:"Apache Commons CSV"})," as the underlying implementation and also supports direct configuration through ",(0,l.jsx)(s.a,{href:"https://commons.apache.org/proper/commons-csv/apidocs/org/apache/commons/csv/CSVFormat.html",children:"CSVFormat"})," settings to achieve reading objectives."]}),"\n",(0,l.jsx)(s.p,{children:"The main parameters are as follows:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(s.table,{children:[(0,l.jsx)(s.thead,{children:(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(s.th,{style:{textAlign:"left"},children:"Default Value"}),(0,l.jsx)(s.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(s.tbody,{children:[(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{style:{textAlign:"left"},children:(0,l.jsx)(s.code,{children:"delimiter"})}),(0,l.jsxs)(s.td,{style:{textAlign:"left"},children:[(0,l.jsx)(s.code,{children:","})," (comma)"]}),(0,l.jsxs)(s.td,{style:{textAlign:"left"},children:["Field delimiter. It's recommended to use predefined constants from ",(0,l.jsx)(s.code,{children:"CsvConstant"}),", such as ",(0,l.jsx)(s.code,{children:"CsvConstant.AT"}),"(",(0,l.jsx)(s.code,{children:"@"}),"), ",(0,l.jsx)(s.code,{children:"CsvConstant.TAB"}),", etc."]})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{style:{textAlign:"left"},children:(0,l.jsx)(s.code,{children:"quote"})}),(0,l.jsxs)(s.td,{style:{textAlign:"left"},children:[(0,l.jsx)(s.code,{children:'"'})," (double quote)"]}),(0,l.jsxs)(s.td,{style:{textAlign:"left"},children:["Field quote character. It's recommended to use predefined constants from ",(0,l.jsx)(s.code,{children:"CsvConstant"}),", such as ",(0,l.jsx)(s.code,{children:"CsvConstant.DOUBLE_QUOTE"}),"(",(0,l.jsx)(s.code,{children:'"'}),")."]})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{style:{textAlign:"left"},children:(0,l.jsx)(s.code,{children:"recordSeparator"})}),(0,l.jsx)(s.td,{style:{textAlign:"left"},children:(0,l.jsx)(s.code,{children:"CRLF"})}),(0,l.jsxs)(s.td,{style:{textAlign:"left"},children:["Record (line) separator. Varies by operating system, such as ",(0,l.jsx)(s.code,{children:"CsvConstant.CRLF"}),"(Windows) or ",(0,l.jsx)(s.code,{children:"CsvConstant.LF"}),"(Unix/Linux)."]})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{style:{textAlign:"left"},children:(0,l.jsx)(s.code,{children:"nullString"})}),(0,l.jsx)(s.td,{style:{textAlign:"left"},children:(0,l.jsx)(s.code,{children:"null"})}),(0,l.jsxs)(s.td,{style:{textAlign:"left"},children:["String used to represent ",(0,l.jsx)(s.code,{children:"null"})," values. Note this is different from an empty string ",(0,l.jsx)(s.code,{children:'""'}),"."]})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{style:{textAlign:"left"},children:(0,l.jsx)(s.code,{children:"escape"})}),(0,l.jsx)(s.td,{style:{textAlign:"left"},children:(0,l.jsx)(s.code,{children:"null"})}),(0,l.jsx)(s.td,{style:{textAlign:"left"},children:"Escape character used to escape quote characters themselves."})]})]})]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"parameter-details-and-examples",children:"Parameter Details and Examples"}),"\n",(0,l.jsx)(s.p,{children:"The following sections will explain each parameter in detail with code examples."}),"\n",(0,l.jsx)(s.h3,{id:"delimiter",children:"delimiter"}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.code,{children:"delimiter"})," specifies the field separator in CSV files. The default value is a comma ",(0,l.jsx)(s.code,{children:","}),".\nAdditionally, FastExcel provides constants in ",(0,l.jsx)(s.code,{children:"CsvConstant"})," to simplify usage."]}),"\n",(0,l.jsx)(s.h4,{id:"code-example",children:"Code Example"}),"\n",(0,l.jsxs)(s.p,{children:["If the CSV file uses ",(0,l.jsx)(s.code,{children:"\\u0000"})," as the separator, you can configure it as follows:"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-java",children:'@Test\npublic void delimiterDemo() {\n    String csvFile = "path/to/your.csv";\n    List<DemoData> dataList = FastExcel.read(csvFile, DemoData.class, new DemoDataListener())\n            .csv()\n            .delimiter(CsvConstant.UNICODE_EMPTY)\n            .doReadSync();\n}\n'})}),"\n",(0,l.jsx)(s.h3,{id:"quote",children:"quote"}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.code,{children:"quote"})," specifies the quote character that wraps fields. The default value is double quote ",(0,l.jsx)(s.code,{children:'"'}),".\nThis should be set when field content contains delimiters or line breaks."]}),"\n",(0,l.jsxs)(s.blockquote,{children:["\n",(0,l.jsxs)(s.p,{children:["Note: This cannot be the same as the ",(0,l.jsx)(s.code,{children:"recordSeparator"})," setting. It's recommended to use in combination with ",(0,l.jsx)(s.code,{children:"QuoteMode"}),"."]}),"\n"]}),"\n",(0,l.jsx)(s.h4,{id:"code-example-1",children:"Code Example"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-java",children:'@Test\npublic void quoteDemo() {\n    String csvFile = "path/to/your.csv";\n    List<DemoData> dataList = FastExcel.read(csvFile, DemoData.class, new DemoDataListener())\n            .csv()\n            .quote(CsvConstant.DOUBLE_QUOTE, QuoteMode.MINIMAL)\n            .doReadSync();\n}\n'})}),"\n",(0,l.jsx)(s.h3,{id:"recordseparator",children:"recordSeparator"}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.code,{children:"recordSeparator"})," specifies the line separator in the file. Different operating systems may use different line separators (for example, Windows uses ",(0,l.jsx)(s.code,{children:"CRLF"}),", while Unix/Linux uses ",(0,l.jsx)(s.code,{children:"LF"}),")."]}),"\n",(0,l.jsx)(s.h4,{id:"code-example-2",children:"Code Example"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-java",children:'@Test\npublic void recordSeparatorDemo() {\n    String csvFile = "path/to/your.csv";\n    List<DemoData> dataList = FastExcel.read(csvFile, DemoData.class, new DemoDataListener())\n            .csv()\n            .recordSeparator(CsvConstant.LF)\n            .doReadSync();\n}\n'})}),"\n",(0,l.jsx)(s.h3,{id:"nullstring",children:"nullString"}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.code,{children:"nullString"})," defines a specific string in the file that represents ",(0,l.jsx)(s.code,{children:"null"})," values. For example, you can parse the string ",(0,l.jsx)(s.code,{children:'"N/A"'})," as a ",(0,l.jsx)(s.code,{children:"null"})," object."]}),"\n",(0,l.jsx)(s.h4,{id:"code-example-3",children:"Code Example"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-java",children:'@Test\npublic void nullStringDemo() {\n    String csvFile = "path/to/your.csv";\n    List<DemoData> dataList = FastExcel.read(csvFile, DemoData.class, new DemoDataListener())\n            .csv()\n            .nullString("N/A")\n            .doReadSync();\n}\n'})}),"\n",(0,l.jsx)(s.h3,{id:"escape",children:"escape"}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.code,{children:"escape"})," specifies an escape character that can be used when quote characters (",(0,l.jsx)(s.code,{children:"quote"}),") appear within field values."]}),"\n",(0,l.jsx)(s.h4,{id:"code-example-4",children:"Code Example"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-java",children:'@Test\npublic void escapeDemo() {\n    String csvFile = "path/to/your.csv";\n    List<DemoData> dataList = FastExcel.read(csvFile, DemoData.class, new DemoDataListener())\n            .csv()\n            .escape(CsvConstant.BACKSLASH)\n            .doReadSync();\n}\n'})}),"\n",(0,l.jsx)(s.h2,{id:"csvformat-configuration-details-and-examples",children:"CSVFormat Configuration Details and Examples"}),"\n",(0,l.jsxs)(s.p,{children:["Supports directly building a ",(0,l.jsx)(s.code,{children:"CSVFormat"})," object."]}),"\n",(0,l.jsxs)(s.blockquote,{children:["\n",(0,l.jsx)(s.p,{children:"FastExcel currently still supports this approach, but it's not the most recommended usage method."}),"\n"]}),"\n",(0,l.jsx)(s.h3,{id:"code-example-5",children:"Code Example"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-java",children:'@Test\npublic void escapeDemo() {\n\n    CSVFormat csvFormat = CSVFormat.DEFAULT.builder().setDelimiter(CsvConstant.AT).build();\n    String csvFile = "path/to/your.csv";\n\n    try (ExcelReader excelReader = FastExcel.read(csvFile, DemoData.class, new DemoDataListener()).build()) {\n        ReadWorkbookHolder readWorkbookHolder = excelReader.analysisContext().readWorkbookHolder();\n        // Check if it\'s an instance of CsvReadWorkbookHolder\n        if (readWorkbookHolder instanceof CsvReadWorkbookHolder) {\n            CsvReadWorkbookHolder csvReadWorkbookHolder = (CsvReadWorkbookHolder) readWorkbookHolder;\n            csvReadWorkbookHolder.setCsvFormat(csvFormat);\n        }\n\n        ReadSheet readSheet = FastExcel.readSheet(0).build();\n        excelReader.read(readSheet);\n    }\n}\n'})})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}}}]);