"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4923],{508:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(9729);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},7712:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"read/spring","title":"Spring","description":"This chapter introduces how to integrate and use FastExcel in the Spring framework to handle Excel files uploaded by users.","source":"@site/docs/read/spring.md","sourceDirName":"read","slug":"/read/spring","permalink":"/docs/read/spring","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fesod/edit/main/website/docs/read/spring.md","tags":[],"version":"current","frontMatter":{"id":"spring","title":"Spring"},"sidebar":"docs","previous":{"title":"Converter","permalink":"/docs/read/converter"},"next":{"title":"Simple","permalink":"/docs/write/simple"}}');var a=t(5813),r=t(508);const s={id:"spring",title:"Spring"},l="Spring Integration Guide",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Environment Dependencies",id:"environment-dependencies",level:2},{value:"Maven",id:"maven",level:3},{value:"Creating Upload Endpoints",id:"creating-upload-endpoints",level:2},{value:"POJO Class",id:"pojo-class",level:3},{value:"Data Listener",id:"data-listener",level:3},{value:"Spring Controller",id:"spring-controller",level:3},{value:"Complex Scenarios",id:"complex-scenarios",level:2},{value:"Multi-Template Parsing",id:"multi-template-parsing",level:3},{value:"Exception Handling",id:"exception-handling",level:3},{value:"Practical Applications",id:"practical-applications",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"spring-integration-guide",children:"Spring Integration Guide"})}),"\n",(0,a.jsx)(n.p,{children:"This chapter introduces how to integrate and use FastExcel in the Spring framework to handle Excel files uploaded by users."}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"By creating RESTful API endpoints, users can upload Excel files using HTTP requests, and the server uses FastExcel to parse the data."}),"\n",(0,a.jsx)(n.h2,{id:"environment-dependencies",children:"Environment Dependencies"}),"\n",(0,a.jsx)(n.h3,{id:"maven",children:"Maven"}),"\n",(0,a.jsx)(n.p,{children:"Ensure the necessary dependencies are included in your pom.xml file:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>cn.idev.excel</groupId>\n    <artifactId>fastexcel</artifactId>\n    <version>{version.number}</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter</artifactId>\n</dependency>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"creating-upload-endpoints",children:"Creating Upload Endpoints"}),"\n",(0,a.jsx)(n.h3,{id:"pojo-class",children:"POJO Class"}),"\n",(0,a.jsx)(n.p,{children:"First, define a POJO class for mapping Excel data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"@Getter\n@Setter\n@ToString\npublic class UploadData {\n    private String string;\n    private Date date;\n    private Double doubleData;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"data-listener",children:"Data Listener"}),"\n",(0,a.jsx)(n.p,{children:"Create a listener to handle each row of data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Slf4j\npublic class UploadDataListener extends AnalysisEventListener<UploadData> {\n    private final List<UploadData> list = new ArrayList<>();\n\n    @Override\n    public void invoke(UploadData data, AnalysisContext context) {\n        log.info("Read one record: {}", JSON.toJSONString(data));\n        list.add(data);\n    }\n\n    @Override\n    public void doAfterAllAnalysed(AnalysisContext context) {\n        log.info("All data reading completed!");\n        // Data storage operations can be performed here, such as saving to database\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"spring-controller",children:"Spring Controller"}),"\n",(0,a.jsx)(n.p,{children:"Create a controller to handle file upload requests:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/excel")\npublic class ExcelController {\n\n    @PostMapping("/upload")\n    public ResponseEntity<String> upload(@RequestParam("file") MultipartFile file) {\n        if (file.isEmpty()) {\n            return ResponseEntity.badRequest().body("Please select a file to upload!");\n        }\n\n        try {\n            FastExcel.read(file.getInputStream(), UploadData.class, new UploadDataListener())\n                    .sheet()\n                    .doRead();\n            return ResponseEntity.ok("File uploaded and processed successfully!");\n        } catch (IOException e) {\n            log.error("File processing failed", e);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("File processing failed");\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"complex-scenarios",children:"Complex Scenarios"}),"\n",(0,a.jsx)(n.h3,{id:"multi-template-parsing",children:"Multi-Template Parsing"}),"\n",(0,a.jsx)(n.p,{children:"By defining multiple different model classes and processing methods within the same listener, you can extend support for multi-template parsing as needed."}),"\n",(0,a.jsx)(n.h3,{id:"exception-handling",children:"Exception Handling"}),"\n",(0,a.jsxs)(n.p,{children:["To improve user experience and ensure program robustness, exception handling logic needs to be added during data processing.\nYou can override the ",(0,a.jsx)(n.code,{children:"onException"})," method in custom listeners for detailed exception handling."]}),"\n",(0,a.jsx)(n.h3,{id:"practical-applications",children:"Practical Applications"}),"\n",(0,a.jsxs)(n.p,{children:["In real-world scenarios, parsed data may be stored in a database.\nDatabase interaction logic can be implemented in the ",(0,a.jsx)(n.code,{children:"doAfterAllAnalysed"})," method to ensure data persistence."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);