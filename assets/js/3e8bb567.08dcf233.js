"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3535],{508:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>r});var l=a(9729);const t={},s=l.createContext(t);function i(e){const n=l.useContext(s);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),l.createElement(s.Provider,{value:n},e.children)}},8206:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"read/pojo","title":"POJO","description":"This chapter introduces how to read data by configuring POJO classes.","source":"@site/docs/read/pojo.md","sourceDirName":"read","slug":"/read/pojo","permalink":"/docs/read/pojo","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fesod/edit/main/website/docs/read/pojo.md","tags":[],"version":"current","frontMatter":{"id":"pojo","title":"POJO"},"sidebar":"docs","previous":{"title":"Exception","permalink":"/docs/read/exception"},"next":{"title":"Converter","permalink":"/docs/read/converter"}}');var t=a(5813),s=a(508);const i={id:"pojo",title:"POJO"},r="POJO",o={},d=[{value:"Reading by Column Name or Column Index",id:"reading-by-column-name-or-column-index",level:2},{value:"Overview",id:"overview",level:3},{value:"Example Code",id:"example-code",level:3},{value:"POJO Class",id:"pojo-class",level:4},{value:"\u4ee3\u7801\u793a\u4f8b",id:"\u4ee3\u7801\u793a\u4f8b",level:4},{value:"Cell Objects",id:"cell-objects",level:2},{value:"Overview",id:"overview-1",level:3},{value:"POJO Class",id:"pojo-class-1",level:3},{value:"Code Example",id:"code-example",level:3},{value:"Without POJO Classes and Listeners",id:"without-pojo-classes-and-listeners",level:2},{value:"Overview",id:"overview-2",level:3},{value:"Data Listener",id:"data-listener",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"pojo",children:"POJO"})}),"\n",(0,t.jsx)(n.p,{children:"This chapter introduces how to read data by configuring POJO classes."}),"\n",(0,t.jsx)(n.h2,{id:"reading-by-column-name-or-column-index",children:"Reading by Column Name or Column Index"}),"\n",(0,t.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["You can read Excel data by specifying ",(0,t.jsx)(n.strong,{children:"column names"})," or ",(0,t.jsx)(n.strong,{children:"column indexes"}),". This makes interaction with dynamically generated Excel files more flexible."]}),"\n",(0,t.jsx)(n.h3,{id:"example-code",children:"Example Code"}),"\n",(0,t.jsx)(n.h4,{id:"pojo-class",children:"POJO Class"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Getter\n@Setter\n@EqualsAndHashCode\npublic class IndexOrNameData {\n    @ExcelProperty(index = 2)\n    private Double doubleData;\n\n    @ExcelProperty("String Title")\n    private String string;\n\n    @ExcelProperty("Date Title")\n    private Date date;\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"\u4ee3\u7801\u793a\u4f8b",children:"\u4ee3\u7801\u793a\u4f8b"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\npublic void indexOrNameRead() {\n    String fileName = "path/to/demo.xlsx";\n\n    FastExcel.read(fileName, IndexOrNameData.class, new DemoDataListener())\n            .sheet()\n            .doRead();\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cell-objects",children:"Cell Objects"}),"\n",(0,t.jsx)(n.h3,{id:"overview-1",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"CellData"})," type to receive cell data to support formulas and various cell formats."]}),"\n",(0,t.jsx)(n.h3,{id:"pojo-class-1",children:"POJO Class"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Getter\n@Setter\n@EqualsAndHashCode\npublic class CellDataReadDemoData {\n    private CellData<String> string;\n    private CellData<Date> date;\n    private CellData<Double> doubleData;\n    private CellData<String> formulaValue;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"code-example",children:"Code Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\npublic void cellDataRead() {\n    String fileName = "path/to/demo.xlsx";\n\n    FastExcel.read(fileName, CellDataReadDemoData.class, new DemoDataListener())\n            .sheet()\n            .doRead();\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"without-pojo-classes-and-listeners",children:"Without POJO Classes and Listeners"}),"\n",(0,t.jsx)(n.h3,{id:"overview-2",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["FastExcel supports reading Excel files directly without defining POJO classes, using ",(0,t.jsx)(n.code,{children:"Map<Integer, String>"})," to read data directly."]}),"\n",(0,t.jsx)(n.h3,{id:"data-listener",children:"Data Listener"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Slf4j\npublic class NoModelDataListener extends AnalysisEventListener<Map<Integer, String>> {\n\n    @Override\n    public void invoke(Map<Integer, String> data, AnalysisContext context) {\n        log.info("Read one record: {}", JSON.toJSONString(data));\n    }\n\n    @Override\n    public void doAfterAllAnalysed(AnalysisContext context) {\n        log.info("All data reading completed!");\n    }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);