"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9268],{508:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>o});var n=s(9729);const i={},l=n.createContext(i);function r(e){const t=n.useContext(l);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(l.Provider,{value:t},e.children)}},1038:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"write/csv","title":"CSV","description":"This chapter introduces how to use FastExcel to write custom CSV files.","source":"@site/docs/write/csv.md","sourceDirName":"write","slug":"/write/csv","permalink":"/docs/write/csv","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fesod/edit/main/website/docs/write/csv.md","tags":[],"version":"current","frontMatter":{"id":"csv","title":"CSV"},"sidebar":"docs","previous":{"title":"Image","permalink":"/docs/write/image"},"next":{"title":"Head","permalink":"/docs/write/head"}}');var i=s(5813),l=s(508);const r={id:"csv",title:"CSV"},o="Writing CSV Files",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Parameter Details and Examples",id:"parameter-details-and-examples",level:2},{value:"delimiter",id:"delimiter",level:3},{value:"Code Example",id:"code-example",level:4},{value:"quote",id:"quote",level:3},{value:"Code Example",id:"code-example-1",level:4},{value:"recordSeparator",id:"recordseparator",level:3},{value:"Code Example",id:"code-example-2",level:4},{value:"nullString",id:"nullstring",level:3},{value:"Code Example",id:"code-example-3",level:4},{value:"escape",id:"escape",level:3},{value:"Code Example",id:"code-example-4",level:4},{value:"CSVFormat Configuration Details and Examples",id:"csvformat-configuration-details-and-examples",level:2},{value:"Code Example",id:"code-example-5",level:3}];function a(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"writing-csv-files",children:"Writing CSV Files"})}),"\n",(0,i.jsx)(t.p,{children:"This chapter introduces how to use FastExcel to write custom CSV files."}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(t.p,{children:["FastExcel writes CSV files through different parameter configurations. It uses ",(0,i.jsx)(t.a,{href:"https://commons.apache.org/proper/commons-csv",children:"Apache Commons CSV"})," as the underlying implementation and also supports direct configuration through ",(0,i.jsx)(t.a,{href:"https://commons.apache.org/proper/commons-csv/apidocs/org/apache/commons/csv/CSVFormat.html",children:"CSVFormat"})," settings to achieve writing objectives."]}),"\n",(0,i.jsx)(t.p,{children:"The main parameters are as follows:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Default Value"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"delimiter"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:","})," (comma)"]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Field delimiter. It's recommended to use predefined constants from ",(0,i.jsx)(t.code,{children:"CsvConstant"}),", such as ",(0,i.jsx)(t.code,{children:"CsvConstant.AT"})," (",(0,i.jsx)(t.code,{children:"@"}),"), ",(0,i.jsx)(t.code,{children:"CsvConstant.TAB"}),", etc."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"quote"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:'"'})," (double quote)"]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Field quote character. It's recommended to use predefined constants from ",(0,i.jsx)(t.code,{children:"CsvConstant"}),", such as ",(0,i.jsx)(t.code,{children:"CsvConstant.DOUBLE_QUOTE"})," (",(0,i.jsx)(t.code,{children:'"'}),")."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"recordSeparator"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"CRLF"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Record (line) separator. Varies by operating system, such as ",(0,i.jsx)(t.code,{children:"CsvConstant.CRLF"})," (Windows) or ",(0,i.jsx)(t.code,{children:"CsvConstant.LF"})," (Unix/Linux)."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"nullString"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"null"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["String used to represent ",(0,i.jsx)(t.code,{children:"null"})," values. Note this is different from an empty string ",(0,i.jsx)(t.code,{children:'""'}),"."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"escape"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"null"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Escape character, determines whether to escape special characters."})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"parameter-details-and-examples",children:"Parameter Details and Examples"}),"\n",(0,i.jsx)(t.p,{children:"The following sections will explain each parameter in detail with code examples."}),"\n",(0,i.jsx)(t.h3,{id:"delimiter",children:"delimiter"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"delimiter"})," specifies the field separator in CSV files. The default value is a comma ",(0,i.jsx)(t.code,{children:","}),". Additionally, FastExcel provides constants in ",(0,i.jsx)(t.code,{children:"CsvConstant"})," to simplify usage."]}),"\n",(0,i.jsx)(t.h4,{id:"code-example",children:"Code Example"}),"\n",(0,i.jsxs)(t.p,{children:["If the CSV file uses ",(0,i.jsx)(t.code,{children:"\\u0000"})," as the separator, you can configure it as follows:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Test\npublic void delimiterDemo() {\n    String csvFile = "path/to/your.csv";\n    FastExcel.write(csvFile, DemoData.class)\n            .csv()\n            .delimiter(CsvConstant.UNICODE_EMPTY)\n            .doWrite(data());\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"quote",children:"quote"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"quote"})," specifies the quote character that wraps fields. The default value is double quote ",(0,i.jsx)(t.code,{children:'"'}),". This should be set when field content contains delimiters or line breaks."]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Note: This cannot be the same as the ",(0,i.jsx)(t.code,{children:"recordSeparator"})," setting. It's recommended to use in combination with ",(0,i.jsx)(t.code,{children:"QuoteMode"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"code-example-1",children:"Code Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Test\npublic void quoteDemo() {\n    String csvFile = "path/to/your.csv";\n    FastExcel.write(csvFile, DemoData.class)\n            .csv()\n            .quote(CsvConstant.DOUBLE_QUOTE, QuoteMode.MINIMAL)\n            .doWrite(data());\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"recordseparator",children:"recordSeparator"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"recordSeparator"})," specifies the line separator in the file. Different operating systems may use different line separators (for example, Windows uses ",(0,i.jsx)(t.code,{children:"CRLF"}),", while Unix/Linux uses ",(0,i.jsx)(t.code,{children:"LF"}),")."]}),"\n",(0,i.jsx)(t.h4,{id:"code-example-2",children:"Code Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Test\npublic void recordSeparatorDemo() {\n    String csvFile = "path/to/your.csv";\n    FastExcel.write(csvFile, DemoData.class)\n            .csv()\n            .recordSeparator(CsvConstant.LF)\n            .doWrite(data());\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"nullstring",children:"nullString"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"nullString"})," is used to replace ",(0,i.jsx)(t.code,{children:"null"})," values with a specific string when writing to the file.\nFor example, you can replace ",(0,i.jsx)(t.code,{children:"null"})," objects with the string ",(0,i.jsx)(t.code,{children:'"N/A"'}),"."]}),"\n",(0,i.jsx)(t.h4,{id:"code-example-3",children:"Code Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Test\npublic void nullStringDemo() {\n    String csvFile = "path/to/your.csv";\n    FastExcel.write(csvFile, DemoData.class)\n            .csv()\n            .nullString("N/A")\n            .doWrite(data());\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"escape",children:"escape"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"escape"})," specifies the escape character. When ",(0,i.jsx)(t.code,{children:"escape"})," is used, the output CSV will preserve and display the content."]}),"\n",(0,i.jsx)(t.h4,{id:"code-example-4",children:"Code Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Test\npublic void escapeDemo() {\n    String csvFile = "path/to/your.csv";\n    FastExcel.write(csvFile, DemoData.class)\n            .csv()\n            .escape(CsvConstant.BACKSLASH)\n            .doWrite(data());\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"csvformat-configuration-details-and-examples",children:"CSVFormat Configuration Details and Examples"}),"\n",(0,i.jsxs)(t.p,{children:["Supports directly building a ",(0,i.jsx)(t.code,{children:"CSVFormat"})," object."]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"FastExcel currently still supports this approach, but it's not the most recommended usage method."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"code-example-5",children:"Code Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Test\npublic void csvFormatDemo() {\n    CSVFormat csvFormat = CSVFormat.DEFAULT.builder().setDelimiter(CsvConstant.AT).build();\n    String csvFile = "path/to/your.csv";\n\n    try (ExcelWriter excelWriter = FastExcel.write(csvFile, DemoData.class).excelType(ExcelTypeEnum.CSV).build()) {\n        WriteWorkbookHolder writeWorkbookHolder = excelWriter.writeContext().writeWorkbookHolder();\n        Workbook workbook = writeWorkbookHolder.getWorkbook();\n        // Check if it\'s an instance of CsvWorkbook\n        if (workbook instanceof CsvWorkbook) {\n            CsvWorkbook csvWorkbook = (CsvWorkbook) workbook;\n            csvWorkbook.setCsvFormat(csvFormat);\n            writeWorkbookHolder.setWorkbook(csvWorkbook);\n        }\n        WriteSheet writeSheet = FastExcel.writerSheet(0).build();\n        excelWriter.write(data(), writeSheet);\n    }\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);