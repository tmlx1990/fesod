"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9586],{508:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var t=r(9729);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}},9870:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>v,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"read/converter","title":"Converter","description":"FastExcel supports date, number, and custom format conversions.","source":"@site/docs/read/converter.md","sourceDirName":"read","slug":"/read/converter","permalink":"/docs/read/converter","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fesod/edit/main/website/docs/read/converter.md","tags":[],"version":"current","frontMatter":{"id":"converter","title":"Converter"},"sidebar":"docs","previous":{"title":"POJO","permalink":"/docs/read/pojo"},"next":{"title":"Spring","permalink":"/docs/read/spring"}}');var a=r(5813),o=r(508);const s={id:"converter",title:"Converter"},i="Format Conversion",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:2},{value:"POJO Class",id:"pojo-class",level:3},{value:"Converter",id:"converter",level:3},{value:"Code Example",id:"code-example",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"format-conversion",children:"Format Conversion"})}),"\n",(0,a.jsx)(n.p,{children:"FastExcel supports date, number, and custom format conversions."}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"During usage, we may need to convert read or written data into specific formats. FastExcel provides a flexible converter mechanism that allows users to define custom data conversion rules to meet various business requirements."}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.h3,{id:"pojo-class",children:"POJO Class"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Getter\n@Setter\n@EqualsAndHashCode\npublic class ConverterData {\n    @ExcelProperty(converter = CustomStringStringConverter.class)\n    private String string;\n\n    @DateTimeFormat("yyyyMMddHHmmss")\n    private String date;\n\n    @NumberFormat("#.##%")\n    private String doubleData;\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"converter",children:"Converter"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'public class CustomStringStringConverter implements Converter<String> {\n    @Override\n    public Class<?> supportJavaTypeKey() {\n        return String.class;\n    }\n\n    @Override\n    public CellDataTypeEnum supportExcelTypeKey() {\n        return CellDataTypeEnum.STRING;\n    }\n\n    @Override\n    public String convertToJavaData(ReadConverterContext<?> context) {\n        return "Custom: " + context.getReadCellData().getStringValue();\n    }\n\n    @Override\n    public WriteCellData<?> convertToExcelData(WriteConverterContext<String> context) {\n        return new WriteCellData<>(context.getValue());\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"code-example",children:"Code Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Test\npublic void converterRead() {\n    String fileName = "path/to/demo.xlsx";\n\n    FastExcel.read(fileName, ConverterData.class, new DemoDataListener())\n            .registerConverter(new CustomStringStringConverter()) // Register custom converter\n            .sheet()\n            .doRead();\n}\n'})})]})}function v(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);