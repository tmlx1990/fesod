"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1005],{508:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>d});var s=a(9729);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},8770:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"read/simple","title":"Simple","description":"This chapter introduces how to use FastExcel to perform simple Excel reading operations.","source":"@site/docs/read/simple.md","sourceDirName":"read","slug":"/read/simple","permalink":"/docs/read/simple","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fesod/edit/main/website/docs/read/simple.md","tags":[],"version":"current","frontMatter":{"id":"simple","title":"Simple"},"sidebar":"docs","previous":{"title":"Simple example","permalink":"/docs/quickstart/simple-example"},"next":{"title":"Sheet","permalink":"/docs/read/sheet"}}');var i=a(5813),t=a(508);const l={id:"simple",title:"Simple"},d="Simple Reading",r={},o=[{value:"Data Listeners",id:"data-listeners",level:2},{value:"Overview",id:"overview",level:3},{value:"Usage",id:"usage",level:3},{value:"Instantiation",id:"instantiation",level:4},{value:"<code>Lambda</code> Expressions",id:"lambda-expressions",level:4},{value:"Anonymous Inner Classes",id:"anonymous-inner-classes",level:4},{value:"Data Listeners",id:"data-listeners-1",level:4},{value:"POJO Classes and Listeners",id:"pojo-classes-and-listeners",level:2},{value:"Overview",id:"overview-1",level:3},{value:"POJO Class",id:"pojo-class",level:3},{value:"Data Listener",id:"data-listener",level:3},{value:"Code Example",id:"code-example",level:3},{value:"Without POJO Classes and Listeners",id:"without-pojo-classes-and-listeners",level:2},{value:"Overview",id:"overview-2",level:3},{value:"Data Listener",id:"data-listener-1",level:3},{value:"Synchronous Reading",id:"synchronous-reading",level:2},{value:"Overview",id:"overview-3",level:3},{value:"POJO Class",id:"pojo-class-1",level:3},{value:"Code Examples",id:"code-examples",level:3},{value:"Reading as POJO Object List",id:"reading-as-pojo-object-list",level:4},{value:"Reading as Map List",id:"reading-as-map-list",level:4}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"simple-reading",children:"Simple Reading"})}),"\n",(0,i.jsx)(n.p,{children:"This chapter introduces how to use FastExcel to perform simple Excel reading operations."}),"\n",(0,i.jsx)(n.h2,{id:"data-listeners",children:"Data Listeners"}),"\n",(0,i.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"FastExcel provides a listener mechanism for processing each row of data while reading Excel files."}),"\n",(0,i.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.p,{children:"Data listeners need to be instantiated and support various usage patterns."}),"\n",(0,i.jsx)(n.h4,{id:"instantiation",children:"Instantiation"}),"\n",(0,i.jsx)(n.p,{children:"Listeners cannot be managed by Spring and must be re-instantiated each time an Excel file is read."}),"\n",(0,i.jsxs)(n.h4,{id:"lambda-expressions",children:[(0,i.jsx)(n.code,{children:"Lambda"})," Expressions"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\npublic void simpleRead() {\n    String fileName = "path/to/demo.xlsx";\n\n    FastExcel.read(fileName, DemoData.class, new PageReadListener<>(dataList -> {\n        for (DemoData demoData : dataList) {\n            log.info("Read one record: {}", JSON.toJSONString(demoData));\n        }\n    })).sheet().doRead();\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"anonymous-inner-classes",children:"Anonymous Inner Classes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\npublic void simpleRead() {\n    String fileName = "path/to/demo.xlsx";\n\n    FastExcel.read(fileName, DemoData.class, new ReadListener<DemoData>() {\n        @Override\n        public void invoke(DemoData data, AnalysisContext context) {\n           log.info("Read one record: {}", JSON.toJSONString(data));\n        }\n\n        @Override\n        public void doAfterAllAnalysed(AnalysisContext context) {\n            log.info("All data reading completed!");\n        }\n    }).sheet().doRead();\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"data-listeners-1",children:"Data Listeners"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\npublic void simpleRead() {\n    String fileName = "path/to/demo.xlsx";\n\n    FastExcel.read(fileName, DemoData.class, new DemoDataListener())\n            .sheet()\n            .doRead();\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"pojo-classes-and-listeners",children:"POJO Classes and Listeners"}),"\n",(0,i.jsx)(n.h3,{id:"overview-1",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"FastExcel provides a simple way to read Excel files. Users only need to define a POJO class to represent the data structure, then read data through FastExcel's listener mechanism."}),"\n",(0,i.jsx)(n.h3,{id:"pojo-class",children:"POJO Class"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"DemoData"})," POJO class corresponding to the Excel structure:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Getter\n@Setter\n@EqualsAndHashCode\npublic class DemoData {\n    private String string;\n    private Date date;\n    private Double doubleData;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"data-listener",children:"Data Listener"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"DemoDataListener"})," is a custom listener used to process data read from Excel."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Slf4j\npublic class DemoDataListener implements ReadListener<DemoData> {\n\n    @Override\n    public void invoke(DemoData data, AnalysisContext context) {\n        log.info("Read one record: {}", JSON.toJSONString(data));\n    }\n\n    @Override\n    public void doAfterAllAnalysed(AnalysisContext context) {\n        log.info("All data reading completed!");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"code-example",children:"Code Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\npublic void simpleRead() {\n    String fileName = "path/to/demo.xlsx";\n\n    FastExcel.read(fileName, DemoData.class, new DemoDataListener())\n            .sheet()\n            .doRead();\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"without-pojo-classes-and-listeners",children:"Without POJO Classes and Listeners"}),"\n",(0,i.jsx)(n.h3,{id:"overview-2",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["FastExcel supports reading Excel files directly without defining POJO classes, using ",(0,i.jsx)(n.code,{children:"Map<Integer, String>"})," to read data directly, where the key is the ",(0,i.jsx)(n.strong,{children:"column index"})," and the value is the ",(0,i.jsx)(n.strong,{children:"cell data"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"data-listener-1",children:"Data Listener"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Slf4j\npublic class NoModelDataListener extends AnalysisEventListener<Map<Integer, String>> {\n\n    @Override\n    public void invoke(Map<Integer, String> data, AnalysisContext context) {\n        log.info("Read one record: {}", JSON.toJSONString(data));\n    }\n\n    @Override\n    public void doAfterAllAnalysed(AnalysisContext context) {\n        log.info("All data reading completed!");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"synchronous-reading",children:"Synchronous Reading"}),"\n",(0,i.jsx)(n.h3,{id:"overview-3",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"doReadSync"})," method to directly read Excel data into a list ",(0,i.jsx)(n.strong,{children:"in memory"}),". This method is recommended for scenarios with ",(0,i.jsx)(n.strong,{children:"small data volumes"}),". The read data can be either a list of POJO objects or a list of Maps."]}),"\n",(0,i.jsx)(n.h3,{id:"pojo-class-1",children:"POJO Class"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"DemoData"})," POJO class corresponding to the Excel structure:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Getter\n@Setter\n@EqualsAndHashCode\npublic class DemoData {\n    private String string;\n    private Date date;\n    private Double doubleData;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"code-examples",children:"Code Examples"}),"\n",(0,i.jsx)(n.h4,{id:"reading-as-pojo-object-list",children:"Reading as POJO Object List"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\npublic void synchronousReadToObjectList() {\n    String fileName = "path/to/demo.xlsx";\n\n    // POJO Object List\n    List<DemoData> list = FastExcel.read(fileName)\n            .head(DemoData.class)\n            .sheet()\n            .doReadSync();\n\n    for (DemoData data : list) {\n        log.info("Read data: {}", JSON.toJSONString(data));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"reading-as-map-list",children:"Reading as Map List"}),"\n",(0,i.jsx)(n.p,{children:"When not using POJOs, each row can be read as a Map, where the key is the column index and the value is the cell content."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\npublic void synchronousReadToMapList() {\n    String fileName = "path/to/demo.xlsx";\n\n    // Map List\n    List<Map<Integer, String>> list = FastExcel.read(fileName)\n            .sheet()\n            .doReadSync();\n\n    for (Map<Integer, String> data : list) {\n        log.info("Read data: {}", JSON.toJSONString(data));\n    }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);